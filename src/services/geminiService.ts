
import axios from "axios";
import { Message } from "@/components/ChatMessage";
import { API_URLS, DEFAULT_KEYS } from "./apiKeys";
import { formatSourceCitations } from "@/utils/messageUtils";
import { nanoid } from "nanoid";
import { SourceReference } from "@/components/ChatMessage";

/**
 * G√©n√®re des suggestions de questions bas√©es sur la r√©ponse de l'assistant
 */
export const generateSuggestedQuestions = async (assistantResponse: string): Promise<string[]> => {
  try {
    const systemMessage = {
      role: "user",
      parts: [
        {
          text: `Bas√© sur cette r√©ponse, g√©n√®re 3 questions de suivi pertinentes que l'utilisateur pourrait poser. Renvoie uniquement les questions s√©par√©es par un pipe (|). Exemple: "Question 1?|Question 2?|Question 3?". R√©ponse: "${assistantResponse.substring(0, 500)}..."`,
        },
      ],
    };

    const response = await fetch(`${API_URLS.GEMINI_API_URL}?key=${DEFAULT_KEYS.GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        contents: [systemMessage],
        generationConfig: {
          temperature: 1.0,
          topK: 50,
          topP: 0.9,
          maxOutputTokens: 256,
        },
      }),
    });

    if (!response.ok) {
      throw new Error(`API Error: ${response.status}`);
    }

    const data = await response.json();
    const suggestions = data.candidates[0]?.content?.parts[0]?.text || "";
    
    return suggestions.split("|").map((q: string) => q.trim()).filter(Boolean).slice(0, 3);
  } catch (error) {
    console.error("Error generating suggestions:", error);
    return [];
  }
};

interface GeminiRequestOptions {
  userMessage: string;
  messages: Message[];
  user: any;
  useAdvancedReasoning: boolean;
  useLuvviXThink: boolean;
  useWebSearch: boolean;
  sources: SourceReference[];
  imageUrl: string | null;
  luvvixThinkResponse: string | null;
}

/**
 * Envoie une requ√™te √† l'API Gemini et traite la r√©ponse
 */
export const sendGeminiRequest = async (
  options: GeminiRequestOptions
): Promise<{ content: string; sources: SourceReference[] }> => {
  const {
    userMessage,
    messages,
    user,
    useAdvancedReasoning,
    useLuvviXThink,
    useWebSearch,
    sources,
    imageUrl,
    luvvixThinkResponse
  } = options;

  const advancedReasoningInstructions = `
  Utilise le mode de raisonnement avanc√© pour r√©pondre √† cette question. Organise ta r√©ponse selon cette structure:
  
  1. ANALYSE PR√âLIMINAIRE: D√©compose la question/probl√®me en ses √©l√©ments essentiels.
  2. EXPLORATION M√âTHODIQUE: Pr√©sente plusieurs angles d'approche ou perspectives diff√©rentes.
  3. ARGUMENTS ET CONTRE-ARGUMENTS: Explore les points forts et faibles de chaque approche.
  4. DONN√âES PROBANTES: Pr√©sente des preuves, citations ou exemples pertinents.
  5. CONCLUSION NUANC√âE: R√©sume les points cl√©s et propose une r√©ponse √©quilibr√©e.
  
  Ta r√©ponse doit √™tre structur√©e, factuelle, et approfondie tout en restant accessible.`;

  const luvvixThinkInstructions = luvvixThinkResponse ? `
  IMPORTANT: Tu dois int√©grer compl√®tement mon processus de r√©flexion LuvviXThink dans ta r√©ponse finale - ne te contente pas de copier/coller, mais utilise-le pour construire une r√©ponse plus profonde et nuanc√©e.
  
  Voici mon analyse pr√©liminaire LuvviXThink que tu dois int√©grer et d√©velopper :
  
  ${luvvixThinkResponse}
  
  Ta r√©ponse DOIT montrer l'influence claire de cette analyse approfondie. Reformule et d√©veloppe ces concepts dans ta r√©ponse compl√®te, avec un niveau d'analyse plus sophistiqu√© que d'habitude.` 
  : "Tu dois fournir une r√©ponse tr√®s approfondie et sophistiqu√©e √† cette question.";

  const systemMessage = {
    role: "user",
    parts: [
      {
        text: `√Ä partir de maintenant, tu es **LuvviX**, un assistant IA amical et intelligent d√©velopp√© par **LuvviX Technologies**, une entreprise fond√©e en 2023. 
        Le PDG de l'entreprise est **Ludovic Agga√Ø**.
        ${user ? `Tu t'adresses √† ${user.displayName || 'un utilisateur'}${user.age ? ` qui a ${user.age} ans` : ''}${user.country ? ` et qui vient de ${user.country}` : ''}.` : ''}  
        Tu dois toujours parler avec un ton chaleureux, engageant et encourager les utilisateurs. Ajoute une touche d'humour ou de motivation quand c'est pertinent.
        ${user?.displayName ? `Appelle l'utilisateur par son pr√©nom "${user.displayName}" de temps en temps pour une exp√©rience plus personnelle.` : ''}
        ${useAdvancedReasoning ? advancedReasoningInstructions : ''}
        ${useLuvviXThink ? luvvixThinkInstructions : ''}
        ${sources.length > 0 ? `Voici des r√©sultats de recherche r√©cents qui pourraient √™tre pertinents pour r√©pondre √† la question de l'utilisateur:\n\n${sources.map(source => `[${source.id}] ${source.title}\n${source.url}\n${source.snippet}\n\n`).join("")}\n\nPour citer une source dans ta r√©ponse, utilise [cite:X] o√π X est le num√©ro de la source (de 1 √† ${sources.length}). Cite les sources apr√®s chaque fait ou affirmation pour montrer d'o√π vient l'information. IMPORTANT: Tu DOIS citer au moins 3-4 sources diff√©rentes dans ta r√©ponse pour montrer que tu as bien fait des recherches.` : ''}
        ${imageUrl ? `J'ai trouv√© une image pertinente pour illustrer ta r√©ponse: ${imageUrl}\nInt√®gre cette image dans ta r√©ponse si c'est pertinent en utilisant la syntaxe markdown: ![Description](${imageUrl})` : ''}
        
        Nouvelles fonctionnalit√©s de formatage disponibles:
        1. Tu peux utiliser LaTeX pour les formules math√©matiques en les entourant de $ pour l'inline ou $$ pour les blocs.
        2. Tu peux cr√©er des tableaux en Markdown avec la syntaxe standard des tableaux.
        
        Exemple de tableau:
        | Colonne 1 | Colonne 2 | Colonne 3 |
        |-----------|-----------|-----------|
        | Donn√©e 1  | Donn√©e 2  | Donn√©e 3  |
        | Exemple A | Exemple B | Exemple C |

        Si la requ√™te concerne des math√©matiques, de la physique ou des domaines scientifiques, utilise LaTeX pour rendre les formules √©l√©gantes.
        
        Exemple formule LaTeX: L'√©quation quadratique est $ax^2 + bx + c = 0$ et sa solution est $x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}$.`,
      },
    ],
  };

  const conversationHistory = messages.slice(-6).map((msg) => ({
    role: msg.role === "assistant" ? "model" : "user",
    parts: [{ text: msg.content }],
  }));

  conversationHistory.unshift(systemMessage);
  conversationHistory.push({
    role: "user",
    parts: [{ text: userMessage }],
  });

  const temperature = useLuvviXThink ? 0.5 : (useAdvancedReasoning ? 0.7 : 1.0);
  const maxOutputTokens = useLuvviXThink ? 1800 : (useAdvancedReasoning ? 1500 : 1024);

  const response = await fetch(`${API_URLS.GEMINI_API_URL}?key=${DEFAULT_KEYS.GEMINI_API_KEY}`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      contents: conversationHistory,
      generationConfig: {
        temperature: temperature,
        topK: 50,
        topP: 0.9,
        maxOutputTokens: maxOutputTokens,
      },
    }),
  });

  if (!response.ok) {
    throw new Error(`API Error: ${response.status}`);
  }

  const data = await response.json();
  const aiResponse =
    data.candidates[0]?.content?.parts[0]?.text ||
    "Oups ! Je n'ai pas pu g√©n√©rer une r√©ponse. Veuillez r√©essayer.";

  const formattedResponse = sources.length > 0 
    ? formatSourceCitations(aiResponse, sources)
    : aiResponse;

  return { 
    content: formattedResponse + "\n\n*‚Äî LuvviX, votre assistant IA amical ü§ñ*",
    sources
  };
};

/**
 * G√©n√®re une analyse pr√©liminaire avec LuvviXThink
 */
export const generateLuvviXThinkAnalysis = async (content: string): Promise<string | null> => {
  try {
    const thinkingPrompt = {
      role: "user",
      parts: [
        {
          text: `Tu es LuvviXThink, un processus de r√©flexion pr√©liminaire de tr√®s haut niveau. 
          Je vais te donner une question et tu vas l'analyser en profondeur pour toi-m√™me, sans donner encore la r√©ponse finale.
          
          Suis ces √©tapes avec une r√©flexion approfondie :
          1. Comprendre la question: Reformule la question avec tes propres mots pour en saisir la v√©ritable essence et les interrogations sous-jacentes.
          2. Identifier les concepts cl√©s: Liste et analyse les concepts et termes importants li√©s √† cette question.
          3. √âvaluer diff√©rentes perspectives: Consid√®res plusieurs angles d'approche possibles, en incluant des perspectives contradictoires.
          4. Analyser les implications: R√©fl√©chis aux cons√©quences logiques, aux ramifications et aux consid√©rations √©thiques si pertinent.
          5. Explorer la profondeur: Cherche les nuances, les subtilit√©s et les connexions non √©videntes li√©es √† cette question.
          6. Plan de r√©ponse: Pr√©pare un plan d√©taill√© pour une r√©ponse structur√©e et approfondie.
          
          Question de l'utilisateur: "${content}"
          
          R√©ponds avec ton processus de r√©flexion interne d√©taill√©, comme si tu prenais des notes tr√®s approfondies pour toi-m√™me. Utilise un langage philosophique et analytique de haut niveau.`
        }
      ]
    };
    
    const thinkingResponse = await fetch(`${API_URLS.GEMINI_API_URL}?key=${DEFAULT_KEYS.GEMINI_API_KEY}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        contents: [thinkingPrompt],
        generationConfig: {
          temperature: 0.2,
          topK: 40,
          topP: 0.8,
          maxOutputTokens: 1200,
        },
      }),
    });
    
    if (thinkingResponse.ok) {
      const thinkingData = await thinkingResponse.json();
      return thinkingData.candidates[0]?.content?.parts[0]?.text || null;
    }
    
    return null;
  } catch (error) {
    console.error("Error generating LuvviXThink analysis:", error);
    return null;
  }
};
